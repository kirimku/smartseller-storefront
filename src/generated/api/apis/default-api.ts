/* tslint:disable */
/* eslint-disable */
/**
 * SmartSeller Backend API
 * API documentation for the SmartSeller Backend service - E-commerce Management Platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiV1AuthGoogleCallbackPost200Response } from '../models';
// @ts-ignore
import type { ApiV1AuthGoogleCallbackPostRequest } from '../models';
// @ts-ignore
import type { ApiV1AuthGoogleLoginGet200Response } from '../models';
// @ts-ignore
import type { ApiV1AuthRefreshPost200Response } from '../models';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { SuccessResponse } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Handles the callback from Google OAuth. Frontend should call this endpoint after receiving the authorization code from Google.
         * @summary Google Login Callback
         * @param {ApiV1AuthGoogleCallbackPostRequest} apiV1AuthGoogleCallbackPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthGoogleCallbackPost: async (apiV1AuthGoogleCallbackPostRequest: ApiV1AuthGoogleCallbackPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AuthGoogleCallbackPostRequest' is not null or undefined
            assertParamExists('apiV1AuthGoogleCallbackPost', 'apiV1AuthGoogleCallbackPostRequest', apiV1AuthGoogleCallbackPostRequest)
            const localVarPath = `/api/v1/auth/google/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthGoogleCallbackPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the Google OAuth login URL for client-side redirection.
         * @summary Get Google Login URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthGoogleLoginGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/google/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Logs out the user and invalidates the session.
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLogoutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Refresh the current access token using a refresh token
         * @summary Refresh Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthRefreshPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Handles the callback from Google OAuth. Frontend should call this endpoint after receiving the authorization code from Google.
         * @summary Google Login Callback
         * @param {ApiV1AuthGoogleCallbackPostRequest} apiV1AuthGoogleCallbackPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthGoogleCallbackPost(apiV1AuthGoogleCallbackPostRequest: ApiV1AuthGoogleCallbackPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthGoogleCallbackPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthGoogleCallbackPost(apiV1AuthGoogleCallbackPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthGoogleCallbackPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the Google OAuth login URL for client-side redirection.
         * @summary Get Google Login URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthGoogleLoginGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthGoogleLoginGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthGoogleLoginGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthGoogleLoginGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Logs out the user and invalidates the session.
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthLogoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthLogoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthLogoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Refresh the current access token using a refresh token
         * @summary Refresh Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthRefreshPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthRefreshPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthRefreshPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthRefreshPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Handles the callback from Google OAuth. Frontend should call this endpoint after receiving the authorization code from Google.
         * @summary Google Login Callback
         * @param {ApiV1AuthGoogleCallbackPostRequest} apiV1AuthGoogleCallbackPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthGoogleCallbackPost(apiV1AuthGoogleCallbackPostRequest: ApiV1AuthGoogleCallbackPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthGoogleCallbackPost200Response> {
            return localVarFp.apiV1AuthGoogleCallbackPost(apiV1AuthGoogleCallbackPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the Google OAuth login URL for client-side redirection.
         * @summary Get Google Login URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthGoogleLoginGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthGoogleLoginGet200Response> {
            return localVarFp.apiV1AuthGoogleLoginGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Logs out the user and invalidates the session.
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLogoutPost(options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.apiV1AuthLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Refresh the current access token using a refresh token
         * @summary Refresh Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthRefreshPost(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthRefreshPost200Response> {
            return localVarFp.apiV1AuthRefreshPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Handles the callback from Google OAuth. Frontend should call this endpoint after receiving the authorization code from Google.
     * @summary Google Login Callback
     * @param {ApiV1AuthGoogleCallbackPostRequest} apiV1AuthGoogleCallbackPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiV1AuthGoogleCallbackPost(apiV1AuthGoogleCallbackPostRequest: ApiV1AuthGoogleCallbackPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthGoogleCallbackPost200Response>;

    /**
     * Returns the Google OAuth login URL for client-side redirection.
     * @summary Get Google Login URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiV1AuthGoogleLoginGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthGoogleLoginGet200Response>;

    /**
     * Logs out the user and invalidates the session.
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiV1AuthLogoutPost(options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse>;

    /**
     * Refresh the current access token using a refresh token
     * @summary Refresh Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiV1AuthRefreshPost(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthRefreshPost200Response>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Handles the callback from Google OAuth. Frontend should call this endpoint after receiving the authorization code from Google.
     * @summary Google Login Callback
     * @param {ApiV1AuthGoogleCallbackPostRequest} apiV1AuthGoogleCallbackPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthGoogleCallbackPost(apiV1AuthGoogleCallbackPostRequest: ApiV1AuthGoogleCallbackPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthGoogleCallbackPost(apiV1AuthGoogleCallbackPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the Google OAuth login URL for client-side redirection.
     * @summary Get Google Login URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthGoogleLoginGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthGoogleLoginGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Logs out the user and invalidates the session.
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthLogoutPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Refresh the current access token using a refresh token
     * @summary Refresh Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthRefreshPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthRefreshPost(options).then((request) => request(this.axios, this.basePath));
    }
}

