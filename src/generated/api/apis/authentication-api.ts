/* tslint:disable */
/* eslint-disable */
/**
 * SmartSeller Backend API
 * API documentation for the SmartSeller Backend service - E-commerce Management Platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiV1AuthForgotPasswordPost200Response } from '../models';
// @ts-ignore
import type { ApiV1AuthForgotPasswordPostRequest } from '../models';
// @ts-ignore
import type { ApiV1AuthLoginPost200Response } from '../models';
// @ts-ignore
import type { ApiV1AuthLoginPostRequest } from '../models';
// @ts-ignore
import type { ApiV1AuthResetPasswordPost200Response } from '../models';
// @ts-ignore
import type { ApiV1AuthResetPasswordPostRequest } from '../models';
// @ts-ignore
import type { ErrorResponse } from '../models';
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Initiates the password reset process by sending a reset email to the user\'s registered email address. For security reasons, this endpoint always returns success regardless of whether the email exists in the system. 
         * @summary Initiate Password Reset
         * @param {ApiV1AuthForgotPasswordPostRequest} apiV1AuthForgotPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthForgotPasswordPost: async (apiV1AuthForgotPasswordPostRequest: ApiV1AuthForgotPasswordPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AuthForgotPasswordPostRequest' is not null or undefined
            assertParamExists('apiV1AuthForgotPasswordPost', 'apiV1AuthForgotPasswordPostRequest', apiV1AuthForgotPasswordPostRequest)
            const localVarPath = `/api/v1/auth/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthForgotPasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Authenticates a user with email/phone and password
         * @summary Login with email/phone and password
         * @param {ApiV1AuthLoginPostRequest} apiV1AuthLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLoginPost: async (apiV1AuthLoginPostRequest: ApiV1AuthLoginPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AuthLoginPostRequest' is not null or undefined
            assertParamExists('apiV1AuthLoginPost', 'apiV1AuthLoginPostRequest', apiV1AuthLoginPostRequest)
            const localVarPath = `/api/v1/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthLoginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resets the user\'s password using a valid reset token received via email. The token expires after 1 hour for security purposes. 
         * @summary Reset Password
         * @param {ApiV1AuthResetPasswordPostRequest} apiV1AuthResetPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthResetPasswordPost: async (apiV1AuthResetPasswordPostRequest: ApiV1AuthResetPasswordPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AuthResetPasswordPostRequest' is not null or undefined
            assertParamExists('apiV1AuthResetPasswordPost', 'apiV1AuthResetPasswordPostRequest', apiV1AuthResetPasswordPostRequest)
            const localVarPath = `/api/v1/auth/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthResetPasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * Initiates the password reset process by sending a reset email to the user\'s registered email address. For security reasons, this endpoint always returns success regardless of whether the email exists in the system. 
         * @summary Initiate Password Reset
         * @param {ApiV1AuthForgotPasswordPostRequest} apiV1AuthForgotPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthForgotPasswordPost(apiV1AuthForgotPasswordPostRequest: ApiV1AuthForgotPasswordPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthForgotPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthForgotPasswordPost(apiV1AuthForgotPasswordPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.apiV1AuthForgotPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Authenticates a user with email/phone and password
         * @summary Login with email/phone and password
         * @param {ApiV1AuthLoginPostRequest} apiV1AuthLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthLoginPost(apiV1AuthLoginPostRequest: ApiV1AuthLoginPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthLoginPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthLoginPost(apiV1AuthLoginPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.apiV1AuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Resets the user\'s password using a valid reset token received via email. The token expires after 1 hour for security purposes. 
         * @summary Reset Password
         * @param {ApiV1AuthResetPasswordPostRequest} apiV1AuthResetPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthResetPasswordPost(apiV1AuthResetPasswordPostRequest: ApiV1AuthResetPasswordPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthResetPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthResetPasswordPost(apiV1AuthResetPasswordPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.apiV1AuthResetPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * Initiates the password reset process by sending a reset email to the user\'s registered email address. For security reasons, this endpoint always returns success regardless of whether the email exists in the system. 
         * @summary Initiate Password Reset
         * @param {ApiV1AuthForgotPasswordPostRequest} apiV1AuthForgotPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthForgotPasswordPost(apiV1AuthForgotPasswordPostRequest: ApiV1AuthForgotPasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthForgotPasswordPost200Response> {
            return localVarFp.apiV1AuthForgotPasswordPost(apiV1AuthForgotPasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Authenticates a user with email/phone and password
         * @summary Login with email/phone and password
         * @param {ApiV1AuthLoginPostRequest} apiV1AuthLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLoginPost(apiV1AuthLoginPostRequest: ApiV1AuthLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthLoginPost200Response> {
            return localVarFp.apiV1AuthLoginPost(apiV1AuthLoginPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Resets the user\'s password using a valid reset token received via email. The token expires after 1 hour for security purposes. 
         * @summary Reset Password
         * @param {ApiV1AuthResetPasswordPostRequest} apiV1AuthResetPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthResetPasswordPost(apiV1AuthResetPasswordPostRequest: ApiV1AuthResetPasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthResetPasswordPost200Response> {
            return localVarFp.apiV1AuthResetPasswordPost(apiV1AuthResetPasswordPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - interface
 * @export
 * @interface AuthenticationApi
 */
export interface AuthenticationApiInterface {
    /**
     * Initiates the password reset process by sending a reset email to the user\'s registered email address. For security reasons, this endpoint always returns success regardless of whether the email exists in the system. 
     * @summary Initiate Password Reset
     * @param {ApiV1AuthForgotPasswordPostRequest} apiV1AuthForgotPasswordPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    apiV1AuthForgotPasswordPost(apiV1AuthForgotPasswordPostRequest: ApiV1AuthForgotPasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthForgotPasswordPost200Response>;

    /**
     * Authenticates a user with email/phone and password
     * @summary Login with email/phone and password
     * @param {ApiV1AuthLoginPostRequest} apiV1AuthLoginPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    apiV1AuthLoginPost(apiV1AuthLoginPostRequest: ApiV1AuthLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthLoginPost200Response>;

    /**
     * Resets the user\'s password using a valid reset token received via email. The token expires after 1 hour for security purposes. 
     * @summary Reset Password
     * @param {ApiV1AuthResetPasswordPostRequest} apiV1AuthResetPasswordPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    apiV1AuthResetPasswordPost(apiV1AuthResetPasswordPostRequest: ApiV1AuthResetPasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthResetPasswordPost200Response>;

}

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI implements AuthenticationApiInterface {
    /**
     * Initiates the password reset process by sending a reset email to the user\'s registered email address. For security reasons, this endpoint always returns success regardless of whether the email exists in the system. 
     * @summary Initiate Password Reset
     * @param {ApiV1AuthForgotPasswordPostRequest} apiV1AuthForgotPasswordPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiV1AuthForgotPasswordPost(apiV1AuthForgotPasswordPostRequest: ApiV1AuthForgotPasswordPostRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).apiV1AuthForgotPasswordPost(apiV1AuthForgotPasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Authenticates a user with email/phone and password
     * @summary Login with email/phone and password
     * @param {ApiV1AuthLoginPostRequest} apiV1AuthLoginPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiV1AuthLoginPost(apiV1AuthLoginPostRequest: ApiV1AuthLoginPostRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).apiV1AuthLoginPost(apiV1AuthLoginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resets the user\'s password using a valid reset token received via email. The token expires after 1 hour for security purposes. 
     * @summary Reset Password
     * @param {ApiV1AuthResetPasswordPostRequest} apiV1AuthResetPasswordPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiV1AuthResetPasswordPost(apiV1AuthResetPasswordPostRequest: ApiV1AuthResetPasswordPostRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).apiV1AuthResetPasswordPost(apiV1AuthResetPasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

