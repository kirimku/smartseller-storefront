openapi: 3.0.3
info:
  title: SmartSeller Storefront API
  description: |
    Storefront management API for SmartSeller platform.
    This API provides endpoints for creating, managing, and customizing storefronts.
  version: 1.0.0
  contact:
    name: SmartSeller Team
    email: support@smartseller.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api/v1
    description: Development server
  - url: https://api.smartseller.com/api/v1
    description: Production server

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Error Responses
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Operation failed"
        error:
          type: string
          example: "validation_error"
        error_detail:
          type: string
          example: "Name field is required"
        validation_errors:
          type: array
          items:
            type: string
          example: ["Name: wajib diisi", "Domain: sudah digunakan"]
        meta:
          type: object
          properties:
            http_status:
              type: integer
              example: 400

    # Success Responses
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"
        data:
          type: object
          nullable: true

    # Storefront Schemas
    CreateStorefrontRequest:
      type: object
      required:
        - customer_id
        - name
        - slug
        - domain
      properties:
        customer_id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        name:
          type: string
          minLength: 3
          maxLength: 100
          example: "My Awesome Store"
        slug:
          type: string
          pattern: '^[a-z0-9-]+$'
          minLength: 3
          maxLength: 50
          example: "my-awesome-store"
        domain:
          type: string
          format: hostname
          minLength: 3
          maxLength: 100
          example: "mystore.smartseller.com"
        description:
          type: string
          maxLength: 500
          nullable: true
          example: "Premium electronics and gadgets store"
        logo_url:
          type: string
          format: uri
          nullable: true
          example: "https://cdn.smartseller.com/logos/mystore.png"
        banner_url:
          type: string
          format: uri
          nullable: true
          example: "https://cdn.smartseller.com/banners/mystore-banner.jpg"
        theme:
          type: string
          enum: [default, modern, classic, minimal]
          default: default
          example: "modern"
        custom_css:
          type: string
          nullable: true
          example: ".header { background: #ff6b35; }"
        seo_title:
          type: string
          maxLength: 60
          nullable: true
          example: "My Awesome Store - Best Electronics Online"
        seo_description:
          type: string
          maxLength: 160
          nullable: true
          example: "Shop the latest electronics and gadgets at unbeatable prices. Fast shipping, quality products."
        seo_keywords:
          type: string
          maxLength: 200
          nullable: true
          example: "electronics, gadgets, smartphones, laptops, accessories"
        social_links:
          type: object
          nullable: true
          properties:
            facebook:
              type: string
              format: uri
              nullable: true
              example: "https://facebook.com/myawesomestore"
            instagram:
              type: string
              format: uri
              nullable: true
              example: "https://instagram.com/myawesomestore"
            twitter:
              type: string
              format: uri
              nullable: true
              example: "https://twitter.com/myawesomestore"
            whatsapp:
              type: string
              pattern: '^[0-9+\-\s()]+$'
              nullable: true
              example: "+62812345678"
        business_hours:
          type: object
          nullable: true
          properties:
            monday:
              $ref: '#/components/schemas/BusinessHours'
            tuesday:
              $ref: '#/components/schemas/BusinessHours'
            wednesday:
              $ref: '#/components/schemas/BusinessHours'
            thursday:
              $ref: '#/components/schemas/BusinessHours'
            friday:
              $ref: '#/components/schemas/BusinessHours'
            saturday:
              $ref: '#/components/schemas/BusinessHours'
            sunday:
              $ref: '#/components/schemas/BusinessHours'

    BusinessHours:
      type: object
      properties:
        is_open:
          type: boolean
          example: true
        open_time:
          type: string
          pattern: '^([01]?[0-9]|2[0-3]):[0-5][0-9]$'
          example: "09:00"
        close_time:
          type: string
          pattern: '^([01]?[0-9]|2[0-3]):[0-5][0-9]$'
          example: "18:00"

    UpdateStorefrontRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
          example: "My Updated Store"
        description:
          type: string
          maxLength: 500
          nullable: true
          example: "Updated description for my store"
        logo_url:
          type: string
          format: uri
          nullable: true
          example: "https://cdn.smartseller.com/logos/updated-logo.png"
        banner_url:
          type: string
          format: uri
          nullable: true
          example: "https://cdn.smartseller.com/banners/updated-banner.jpg"
        theme:
          type: string
          enum: [default, modern, classic, minimal]
          example: "classic"
        custom_css:
          type: string
          nullable: true
          example: ".header { background: #007bff; }"
        seo_title:
          type: string
          maxLength: 60
          nullable: true
          example: "Updated Store Title - Best Products"
        seo_description:
          type: string
          maxLength: 160
          nullable: true
          example: "Updated description for SEO purposes"
        seo_keywords:
          type: string
          maxLength: 200
          nullable: true
          example: "updated, keywords, seo"
        social_links:
          type: object
          nullable: true
          properties:
            facebook:
              type: string
              format: uri
              nullable: true
            instagram:
              type: string
              format: uri
              nullable: true
            twitter:
              type: string
              format: uri
              nullable: true
            whatsapp:
              type: string
              pattern: '^[0-9+\-\s()]+$'
              nullable: true
        business_hours:
          type: object
          nullable: true
          properties:
            monday:
              $ref: '#/components/schemas/BusinessHours'
            tuesday:
              $ref: '#/components/schemas/BusinessHours'
            wednesday:
              $ref: '#/components/schemas/BusinessHours'
            thursday:
              $ref: '#/components/schemas/BusinessHours'
            friday:
              $ref: '#/components/schemas/BusinessHours'
            saturday:
              $ref: '#/components/schemas/BusinessHours'
            sunday:
              $ref: '#/components/schemas/BusinessHours'

    StorefrontResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        customer_id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        name:
          type: string
          example: "My Awesome Store"
        slug:
          type: string
          example: "my-awesome-store"
        domain:
          type: string
          example: "mystore.smartseller.com"
        description:
          type: string
          nullable: true
          example: "Premium electronics and gadgets store"
        logo_url:
          type: string
          nullable: true
          example: "https://cdn.smartseller.com/logos/mystore.png"
        banner_url:
          type: string
          nullable: true
          example: "https://cdn.smartseller.com/banners/mystore-banner.jpg"
        theme:
          type: string
          example: "modern"
        custom_css:
          type: string
          nullable: true
          example: ".header { background: #ff6b35; }"
        status:
          type: string
          enum: [active, inactive, suspended, draft]
          example: "active"
        seo_title:
          type: string
          nullable: true
          example: "My Awesome Store - Best Electronics Online"
        seo_description:
          type: string
          nullable: true
          example: "Shop the latest electronics and gadgets at unbeatable prices."
        seo_keywords:
          type: string
          nullable: true
          example: "electronics, gadgets, smartphones, laptops"
        social_links:
          type: object
          nullable: true
          properties:
            facebook:
              type: string
              nullable: true
              example: "https://facebook.com/myawesomestore"
            instagram:
              type: string
              nullable: true
              example: "https://instagram.com/myawesomestore"
            twitter:
              type: string
              nullable: true
              example: "https://twitter.com/myawesomestore"
            whatsapp:
              type: string
              nullable: true
              example: "+62812345678"
        business_hours:
          type: object
          nullable: true
          properties:
            monday:
              $ref: '#/components/schemas/BusinessHours'
            tuesday:
              $ref: '#/components/schemas/BusinessHours'
            wednesday:
              $ref: '#/components/schemas/BusinessHours'
            thursday:
              $ref: '#/components/schemas/BusinessHours'
            friday:
              $ref: '#/components/schemas/BusinessHours'
            saturday:
              $ref: '#/components/schemas/BusinessHours'
            sunday:
              $ref: '#/components/schemas/BusinessHours'
        metrics:
          type: object
          nullable: true
          properties:
            total_views:
              type: integer
              example: 15420
            total_orders:
              type: integer
              example: 342
            conversion_rate:
              type: number
              format: float
              example: 2.22
        created_at:
          type: string
          format: date-time
          example: "2023-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-01-15T10:30:00Z"
        last_activity_at:
          type: string
          format: date-time
          nullable: true
          example: "2023-01-20T14:22:00Z"

    StorefrontStatusUpdateRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [active, inactive, suspended, draft]
          example: "active"
        reason:
          type: string
          maxLength: 200
          nullable: true
          example: "Store is ready for public access"

    StorefrontDuplicateRequest:
      type: object
      required:
        - name
        - slug
        - domain
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
          example: "Copy of My Awesome Store"
        slug:
          type: string
          pattern: '^[a-z0-9-]+$'
          minLength: 3
          maxLength: 50
          example: "copy-of-my-awesome-store"
        domain:
          type: string
          format: hostname
          minLength: 3
          maxLength: 100
          example: "copy-mystore.smartseller.com"
        include_products:
          type: boolean
          default: false
          example: true
        include_settings:
          type: boolean
          default: true
          example: true

    StorefrontAnalyticsResponse:
      type: object
      properties:
        period:
          type: string
          example: "30d"
        views:
          type: object
          properties:
            total:
              type: integer
              example: 15420
            unique:
              type: integer
              example: 8934
            daily_average:
              type: number
              format: float
              example: 514.0
        orders:
          type: object
          properties:
            total:
              type: integer
              example: 342
            completed:
              type: integer
              example: 287
            pending:
              type: integer
              example: 35
            cancelled:
              type: integer
              example: 20
            conversion_rate:
              type: number
              format: float
              example: 2.22
        revenue:
          type: object
          properties:
            total:
              type: number
              format: float
              example: 125450.75
            average_order_value:
              type: number
              format: float
              example: 437.25
        top_products:
          type: array
          items:
            type: object
            properties:
              product_id:
                type: string
                format: uuid
                example: "550e8400-e29b-41d4-a716-446655440000"
              product_name:
                type: string
                example: "iPhone 14 Pro"
              views:
                type: integer
                example: 2345
              orders:
                type: integer
                example: 89
              revenue:
                type: number
                format: float
                example: 45680.50
        traffic_sources:
          type: object
          properties:
            direct:
              type: integer
              example: 6234
            search:
              type: integer
              example: 4567
            social:
              type: integer
              example: 2891
            referral:
              type: integer
              example: 1728

    PaginatedStorefrontResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/StorefrontResponse'
        pagination:
          type: object
          properties:
            total:
              type: integer
              example: 45
            per_page:
              type: integer
              example: 20
            current_page:
              type: integer
              example: 1
            last_page:
              type: integer
              example: 3

  parameters:
    StorefrontIdParam:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Storefront ID
      example: "550e8400-e29b-41d4-a716-446655440000"

    CustomerIdParam:
      name: customer_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Customer ID
      example: "550e8400-e29b-41d4-a716-446655440000"

    SlugParam:
      name: slug
      in: path
      required: true
      schema:
        type: string
        pattern: '^[a-z0-9-]+$'
      description: Storefront slug
      example: "my-awesome-store"

    PageParam:
      name: page
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
      description: Page number for pagination
      example: 1

    PageSizeParam:
      name: page_size
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Number of items per page
      example: 20

    SearchQueryParam:
      name: query
      in: query
      required: false
      schema:
        type: string
      description: Search query string
      example: "electronics"

tags:
  - name: storefronts
    description: Storefront management operations
  - name: analytics
    description: Storefront analytics and reporting

paths:
  # Storefront CRUD endpoints
  /storefronts:
    post:
      tags:
        - storefronts
      summary: Create a new storefront
      description: Create a new storefront for a customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStorefrontRequest'
      responses:
        '201':
          description: Storefront created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Storefront created successfully"
                  data:
                    $ref: '#/components/schemas/StorefrontResponse'
        '400':
          description: Bad request - validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - slug or domain already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - storefronts
      summary: List all storefronts
      description: Retrieve all storefronts with filtering and pagination
      parameters:
        - name: customer_id
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by customer ID
          example: "550e8400-e29b-41d4-a716-446655440000"
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [active, inactive, suspended, draft]
          description: Filter by status
          example: "active"
        - name: theme
          in: query
          required: false
          schema:
            type: string
            enum: [default, modern, classic, minimal]
          description: Filter by theme
          example: "modern"
        - $ref: '#/components/parameters/SearchQueryParam'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: sort_by
          in: query
          required: false
          schema:
            type: string
            enum: [created_at, name, last_activity_at, views, orders]
            default: created_at
          description: Sort field
          example: "created_at"
        - name: sort_dir
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort direction
          example: "desc"
      responses:
        '200':
          description: Storefronts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Storefronts retrieved successfully"
                  data:
                    $ref: '#/components/schemas/PaginatedStorefrontResponse'

  /storefronts/{id}:
    get:
      tags:
        - storefronts
      summary: Get storefront by ID
      description: Retrieve storefront details by ID
      parameters:
        - $ref: '#/components/parameters/StorefrontIdParam'
        - name: include_metrics
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: Include performance metrics
          example: true
      responses:
        '200':
          description: Storefront retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Storefront retrieved successfully"
                  data:
                    $ref: '#/components/schemas/StorefrontResponse'
        '404':
          description: Storefront not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - storefronts
      summary: Update storefront
      description: Update storefront information
      parameters:
        - $ref: '#/components/parameters/StorefrontIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStorefrontRequest'
      responses:
        '200':
          description: Storefront updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Storefront updated successfully"
                  data:
                    $ref: '#/components/schemas/StorefrontResponse'
        '400':
          description: Bad request - validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Storefront not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - storefronts
      summary: Delete storefront
      description: Delete a storefront (soft delete)
      parameters:
        - $ref: '#/components/parameters/StorefrontIdParam'
      responses:
        '200':
          description: Storefront deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Storefront not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /storefronts/slug/{slug}:
    get:
      tags:
        - storefronts
      summary: Get storefront by slug
      description: Retrieve storefront details by slug
      security: []  # Public endpoint
      parameters:
        - $ref: '#/components/parameters/SlugParam'
        - name: include_metrics
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: Include performance metrics
          example: false
      responses:
        '200':
          description: Storefront retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Storefront retrieved successfully"
                  data:
                    $ref: '#/components/schemas/StorefrontResponse'
        '404':
          description: Storefront not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /customers/{customer_id}/storefronts:
    get:
      tags:
        - storefronts
      summary: Get customer storefronts
      description: Retrieve all storefronts for a specific customer
      parameters:
        - $ref: '#/components/parameters/CustomerIdParam'
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [active, inactive, suspended, draft]
          description: Filter by status
          example: "active"
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          description: Customer storefronts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Customer storefronts retrieved successfully"
                  data:
                    $ref: '#/components/schemas/PaginatedStorefrontResponse'

  /storefronts/{id}/status:
    put:
      tags:
        - storefronts
      summary: Update storefront status
      description: Update the status of a storefront
      parameters:
        - $ref: '#/components/parameters/StorefrontIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorefrontStatusUpdateRequest'
      responses:
        '200':
          description: Storefront status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Storefront status updated successfully"
                  data:
                    $ref: '#/components/schemas/StorefrontResponse'
        '400':
          description: Bad request - validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Storefront not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /storefronts/{id}/duplicate:
    post:
      tags:
        - storefronts
      summary: Duplicate storefront
      description: Create a copy of an existing storefront
      parameters:
        - $ref: '#/components/parameters/StorefrontIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorefrontDuplicateRequest'
      responses:
        '201':
          description: Storefront duplicated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Storefront duplicated successfully"
                  data:
                    $ref: '#/components/schemas/StorefrontResponse'
        '400':
          description: Bad request - validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Storefront not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - slug or domain already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Analytics endpoints
  /storefronts/{id}/analytics:
    get:
      tags:
        - storefronts
        - analytics
      summary: Get storefront analytics
      description: Get analytics data for a storefront
      parameters:
        - $ref: '#/components/parameters/StorefrontIdParam'
        - name: period
          in: query
          required: false
          schema:
            type: string
            enum: [24h, 7d, 30d, 90d, 1y, custom]
            default: 30d
          description: Time period for analytics
          example: "30d"
        - name: start_date
          in: query
          required: false
          schema:
            type: string
            format: date
          description: Start date for custom period (YYYY-MM-DD)
          example: "2023-01-01"
        - name: end_date
          in: query
          required: false
          schema:
            type: string
            format: date
          description: End date for custom period (YYYY-MM-DD)
          example: "2023-01-31"
        - name: metrics
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum: [views, orders, revenue, conversion, traffic_sources, top_products]
          description: Specific metrics to include
          example: ["views", "orders", "revenue"]
      responses:
        '200':
          description: Analytics data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Analytics data retrieved successfully"
                  data:
                    $ref: '#/components/schemas/StorefrontAnalyticsResponse'
        '404':
          description: Storefront not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /storefronts/validate-slug/{slug}:
    get:
      tags:
        - storefronts
      summary: Validate storefront slug
      description: Check if a storefront slug is available
      security: []  # Public endpoint
      parameters:
        - $ref: '#/components/parameters/SlugParam'
      responses:
        '200':
          description: Slug validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Slug is available"
                  data:
                    type: object
                    properties:
                      available:
                        type: boolean
                        example: true
                      suggestions:
                        type: array
                        items:
                          type: string
                        example: ["my-awesome-store-2", "my-awesome-store-new"]

  /storefronts/validate-domain:
    post:
      tags:
        - storefronts
      summary: Validate storefront domain
      description: Check if a storefront domain is available and valid
      security: []  # Public endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - domain
              properties:
                domain:
                  type: string
                  format: hostname
                  example: "mystore.smartseller.com"
      responses:
        '200':
          description: Domain validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Domain is available"
                  data:
                    type: object
                    properties:
                      available:
                        type: boolean
                        example: true
                      valid:
                        type: boolean
                        example: true
                      suggestions:
                        type: array
                        items:
                          type: string
                        example: ["mystore-2.smartseller.com", "mystore-new.smartseller.com"]